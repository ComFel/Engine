int main ()
    {

        // crear ventana

        // crear escena (recibe referencia a la ventana)

        // ejecutar escena

        return 0;

    }



    class Scene
    {

        // guarda puntero a la ventana

        // tiene sistemas y tareas

        // tiene un kernel que ejecuta los sistemas y tareas

        // tiene entidades

        // en el constructor se recibe la ruta del archivo que describe la escena

        // tiene un método que se encarga de la carga del archivo que describe la escena

    };



    class Task
    {

        // declara los métodos que deben implementar tareas/sistemas

        // gestiona la prioridad

        // destructor virtual...

    };



    class Component
    {

        // sabe a qué entidad pertenece

        // destructor virtual...

    };



    class Renderable_Component : public Component
    {

        // guarda el modelo que combina malla y material

    };



    class Transform_Component : public Component
    {    

        // guarda desplazamiento, orientación y escala

    };



    class Control_Component : public Component
    {    

        // guarda un puntero a una función que hay que ejecutar para controlar la entidad

        // o el código de un script (en algún lenguaje como Lua)

    };



    class Physics_Component : public Component
    {    

        // guarda el cuerpo rígido asociado a la entidad

    };



    class Entity
    {

        // guarda punteros al parent y a la escena

        // tiene un id?

        // tiene una lista o mapa de componentes

        // el componente transform podría estar siempre presente (aparte del resto de componentes)

        // permite acceder a los componentes (y al transform)

    };



    class System : public Task
    {

        // sabe a qué escena pertenece

        // tiene un método para crear componentes (de los que reconoce) a modo de factoría

        // destructor virtual...

    };



    class Render_System : public System
    {

        // contiene al renderer

        // tiene una lista de todos los componentes de render que se crearon

        // crea componentes de render

        // implementa los métodos de la interfaz de Task

        // en el método que se ejecuta cada fotograma realiza el render

        // para hacer el render primero, para cada componente de render, toma el transform de su entidad y se lo aplica al modelo que guarda el componente

    };



    class Physics_System : public System
    {

        // guarda el "mundo" de física (la clase que contiene/manipula todos los cuerpos rígidos)

        // tiene una lista de todos los componentes de física que se crearon

        // crea componentes de física

        // implementa los métodos de la interfaz de Task

        // en el método que se ejecuta cada fotograma realiza lo siguiente:

        // para cada componente de física, toma el transform de su cuerpo rígido y se lo aplica su entidad

    };